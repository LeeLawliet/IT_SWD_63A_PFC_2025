@using Lee_Xerri_PFC_Home.Repositories
@using System.Security.Claims
@inject FirestoreRepository FirestoreRepo

@model List<Lee_Xerri_PFC_Home.Models.Ticket>
@{
    ViewData["Title"] = "Technician Dashboard";
    var userEmail = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
    var userName = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
    var isTech = await FirestoreRepo.IsTechnicianAsync(userEmail);
}

@if (!isTech)
{
    <div class="alert alert-danger"><p>Only technicians can view this page.</p></div>
    return; // Stop rendering anything else
}
else
{
    <h2>Technician Dashboard</h2>

    <form method="post" asp-controller="Ticket" asp-action="PullTickets">
        <button type="submit" class="btn btn-primary mb-3">Pull Tickets</button>
    </form>

    @if (Model != null && Model.Any())
    {
        <div class="list-group">

            @foreach (var ticket in Model)
            {
                <div class="list-group-item">
                    <h5>@ticket.Title</h5>
                    <p><strong>Description:</strong> @ticket.Description</p>
                    <p><strong>Priority:</strong> @ticket.Priority</p>
                    <p><strong>Status:</strong> @ticket.Status</p>
                    <p><strong>Date:</strong> @ticket.DateUploaded.ToString("g")</p>
                    <form method="post" asp-action="CloseTicket" asp-route-id="@ticket.TicketId">
                        @if (ticket.Status.Equals("closed", StringComparison.OrdinalIgnoreCase))
                        {
                            <button type="button" class="btn btn-outline-success" disabled>Closed</button>
                        }
                        else
                        {
                            <button type="submit" class="btn btn-success">Close</button>
                        }
                    </form>
                </div>
            }
        </div>
    }
    else
    {
        <p>No tickets available. Click "Pull Tickets" to refresh.</p>
    }
}